//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Plane"",
            ""id"": ""2ea94c5a-6f08-4b4a-9918-d477111be117"",
            ""actions"": [
                {
                    ""name"": ""Right stick"",
                    ""type"": ""Value"",
                    ""id"": ""09fbede2-af60-4354-a448-f431dae9a40e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Left stick"",
                    ""type"": ""Value"",
                    ""id"": ""b8a539c6-8941-42ef-82bc-d43219e46379"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throtle"",
                    ""type"": ""Value"",
                    ""id"": ""de46900f-49a1-454f-8293-6d573789c292"",
                    ""expectedControlType"": ""Double"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3975c534-9891-4277-9698-9b7650fff149"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right stick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81561721-7123-41d5-bead-109033c673fe"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left stick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ed92a47-28b9-4a54-86d8-f5670fa326ec"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throtle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Plane
        m_Plane = asset.FindActionMap("Plane", throwIfNotFound: true);
        m_Plane_Rightstick = m_Plane.FindAction("Right stick", throwIfNotFound: true);
        m_Plane_Leftstick = m_Plane.FindAction("Left stick", throwIfNotFound: true);
        m_Plane_Throtle = m_Plane.FindAction("Throtle", throwIfNotFound: true);
    }

    ~@Input()
    {
        UnityEngine.Debug.Assert(!m_Plane.enabled, "This will cause a leak and performance issues, Input.Plane.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Plane
    private readonly InputActionMap m_Plane;
    private List<IPlaneActions> m_PlaneActionsCallbackInterfaces = new List<IPlaneActions>();
    private readonly InputAction m_Plane_Rightstick;
    private readonly InputAction m_Plane_Leftstick;
    private readonly InputAction m_Plane_Throtle;
    public struct PlaneActions
    {
        private @Input m_Wrapper;
        public PlaneActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rightstick => m_Wrapper.m_Plane_Rightstick;
        public InputAction @Leftstick => m_Wrapper.m_Plane_Leftstick;
        public InputAction @Throtle => m_Wrapper.m_Plane_Throtle;
        public InputActionMap Get() { return m_Wrapper.m_Plane; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaneActions set) { return set.Get(); }
        public void AddCallbacks(IPlaneActions instance)
        {
            if (instance == null || m_Wrapper.m_PlaneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlaneActionsCallbackInterfaces.Add(instance);
            @Rightstick.started += instance.OnRightstick;
            @Rightstick.performed += instance.OnRightstick;
            @Rightstick.canceled += instance.OnRightstick;
            @Leftstick.started += instance.OnLeftstick;
            @Leftstick.performed += instance.OnLeftstick;
            @Leftstick.canceled += instance.OnLeftstick;
            @Throtle.started += instance.OnThrotle;
            @Throtle.performed += instance.OnThrotle;
            @Throtle.canceled += instance.OnThrotle;
        }

        private void UnregisterCallbacks(IPlaneActions instance)
        {
            @Rightstick.started -= instance.OnRightstick;
            @Rightstick.performed -= instance.OnRightstick;
            @Rightstick.canceled -= instance.OnRightstick;
            @Leftstick.started -= instance.OnLeftstick;
            @Leftstick.performed -= instance.OnLeftstick;
            @Leftstick.canceled -= instance.OnLeftstick;
            @Throtle.started -= instance.OnThrotle;
            @Throtle.performed -= instance.OnThrotle;
            @Throtle.canceled -= instance.OnThrotle;
        }

        public void RemoveCallbacks(IPlaneActions instance)
        {
            if (m_Wrapper.m_PlaneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlaneActions instance)
        {
            foreach (var item in m_Wrapper.m_PlaneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlaneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlaneActions @Plane => new PlaneActions(this);
    public interface IPlaneActions
    {
        void OnRightstick(InputAction.CallbackContext context);
        void OnLeftstick(InputAction.CallbackContext context);
        void OnThrotle(InputAction.CallbackContext context);
    }
}
